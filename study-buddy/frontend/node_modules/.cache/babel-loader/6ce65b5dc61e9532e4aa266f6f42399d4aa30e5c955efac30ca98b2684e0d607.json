{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL; // ✅ keep your .env port unchanged\n\n// create an axios instance for authorized requests\nconst apiClient = axios.create({\n  baseURL: API_URL\n});\n\n// attach token automatically for every request\napiClient.interceptors.request.use(req => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    req.headers.Authorization = `Bearer ${token}`;\n  }\n  return req;\n});\n\n// --- AUTH ROUTES ---\nexport const signup = async data => {\n  return await axios.post(`${API_URL}/signup`, data);\n};\nexport const login = async data => {\n  const response = await axios.post(`${API_URL}/login`, data);\n\n  // ✅ Save token after login\n  if (response.data.access_token) {\n    localStorage.setItem(\"token\", response.data.access_token);\n  }\n  return response;\n};\n\n// --- PROFILE ROUTE ---\nexport const getProfile = async token => {\n  return await axios.get(`${API_URL}/profile`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      // ✅ Fixed header format\n      'Content-Type': 'application/json' // ✅ Explicitly added for safety\n    }\n  });\n};\n\n// --- STUDY GROUP ROUTES ---\n// fetch all study groups\nexport const fetchGroups = async () => {\n  return await apiClient.get(\"/study-group\");\n};\n\n// join a group\nexport const joinGroup = async groupId => {\n  return await apiClient.post(\"/study-group/join\", {\n    group_id: groupId\n  });\n};\n\n// fetch groups the logged-in user has joined\n\n// --- STUDY GROUP ROUTES ---\nexport const getJoinedGroups = async token => {\n  return await axios.get(`${API_URL}/profile/groups`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","interceptors","request","use","req","token","localStorage","getItem","headers","Authorization","signup","data","post","login","response","access_token","setItem","getProfile","get","fetchGroups","joinGroup","groupId","group_id","getJoinedGroups"],"sources":["C:/Users/Administrator/study-buddy/study-buddy/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL; // ✅ keep your .env port unchanged\r\n\r\n// create an axios instance for authorized requests\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// attach token automatically for every request\r\napiClient.interceptors.request.use((req) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    req.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return req;\r\n});\r\n\r\n// --- AUTH ROUTES ---\r\nexport const signup = async (data) => {\r\n  return await axios.post(`${API_URL}/signup`, data);\r\n};\r\n\r\nexport const login = async (data) => {\r\n  const response = await axios.post(`${API_URL}/login`, data);\r\n  \r\n  // ✅ Save token after login\r\n  if (response.data.access_token) {\r\n    localStorage.setItem(\"token\", response.data.access_token);\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\n// --- PROFILE ROUTE ---\r\nexport const getProfile = async (token) => {\r\n  return await axios.get(`${API_URL}/profile`, {\r\n    headers: { \r\n      Authorization: `Bearer ${token}`, // ✅ Fixed header format\r\n      'Content-Type': 'application/json' // ✅ Explicitly added for safety\r\n    }\r\n  });\r\n};\r\n\r\n// --- STUDY GROUP ROUTES ---\r\n// fetch all study groups\r\nexport const fetchGroups = async () => {\r\n  return await apiClient.get(\"/study-group\");\r\n};\r\n\r\n// join a group\r\nexport const joinGroup = async (groupId) => {\r\n  return await apiClient.post(\"/study-group/join\", { group_id: groupId });\r\n};\r\n\r\n// fetch groups the logged-in user has joined\r\n\r\n// --- STUDY GROUP ROUTES ---\r\nexport const getJoinedGroups = async (token) => {\r\n  return await axios.get(`${API_URL}/profile/groups`, {\r\n    headers: { \r\n      Authorization: `Bearer ${token}`, \r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC,CAAC;;AAE/C;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN;AACX,CAAC,CAAC;;AAEF;AACAI,SAAS,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,GAAG,IAAK;EAC1C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,GAAG,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAC/C;EACA,OAAOD,GAAG;AACZ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMM,MAAM,GAAG,MAAOC,IAAI,IAAK;EACpC,OAAO,MAAMlB,KAAK,CAACmB,IAAI,CAAC,GAAGlB,OAAO,SAAS,EAAEiB,IAAI,CAAC;AACpD,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAOF,IAAI,IAAK;EACnC,MAAMG,QAAQ,GAAG,MAAMrB,KAAK,CAACmB,IAAI,CAAC,GAAGlB,OAAO,QAAQ,EAAEiB,IAAI,CAAC;;EAE3D;EACA,IAAIG,QAAQ,CAACH,IAAI,CAACI,YAAY,EAAE;IAC9BT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACH,IAAI,CAACI,YAAY,CAAC;EAC3D;EAEA,OAAOD,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG,MAAOZ,KAAK,IAAK;EACzC,OAAO,MAAMZ,KAAK,CAACyB,GAAG,CAAC,GAAGxB,OAAO,UAAU,EAAE;IAC3Cc,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK,EAAE;MAAE;MAClC,cAAc,EAAE,kBAAkB,CAAC;IACrC;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA,OAAO,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,OAAO,MAAMrB,SAAS,CAACoB,GAAG,CAAC,cAAc,CAAC;AAC5C,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAOC,OAAO,IAAK;EAC1C,OAAO,MAAMvB,SAAS,CAACc,IAAI,CAAC,mBAAmB,EAAE;IAAEU,QAAQ,EAAED;EAAQ,CAAC,CAAC;AACzE,CAAC;;AAED;;AAEA;AACA,OAAO,MAAME,eAAe,GAAG,MAAOlB,KAAK,IAAK;EAC9C,OAAO,MAAMZ,KAAK,CAACyB,GAAG,CAAC,GAAGxB,OAAO,iBAAiB,EAAE;IAClDc,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK,EAAE;MAChC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}